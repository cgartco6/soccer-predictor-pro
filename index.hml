<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Global Soccer Predictor AI</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        :root {
            --primary: #2e7d32;
            --primary-dark: #1b5e20;
            --secondary: #1565c0;
            --accent: #ff9800;
            --light: #f5f5f5;
            --dark: #333;
            --success: #4caf50;
            --danger: #f44336;
            --warning: #ffc107;
            --correct: #a5d6a7;
            --incorrect: #ef9a9a;
            --neon-green: #39ff14;
            --neon-red: #ff073a;
            --betway: #00a651;
            --hollywood: #e6007e;
            --bet365: #00aaff;
            --f180score: #ff6b00;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background-color: #f0f2f5;
            color: var(--dark);
            line-height: 1.6;
        }
        
        .container {
            width: 100%;
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 15px;
        }
        
        header {
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            color: white;
            padding: 1rem 0;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            position: sticky;
            top: 0;
            z-index: 100;
        }
        
        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .logo {
            display: flex;
            align-items: center;
            gap: 10px;
            font-size: 1.5rem;
            font-weight: 700;
        }
        
        .logo i {
            font-size: 2rem;
        }
        
        nav ul {
            display: flex;
            list-style: none;
            gap: 20px;
        }
        
        nav a {
            color: white;
            text-decoration: none;
            font-weight: 500;
            padding: 5px 10px;
            border-radius: 4px;
            transition: background 0.3s;
        }
        
        nav a:hover, nav a.active {
            background: rgba(255,255,255,0.2);
        }
        
        .mobile-menu {
            display: none;
            font-size: 1.5rem;
            cursor: pointer;
        }
        
        .hero {
            background: url('https://images.unsplash.com/photo-1575361204480-aadea25e6e68?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2071&q=80') center/cover no-repeat;
            color: white;
            padding: 3rem 0;
            text-align: center;
            position: relative;
        }
        
        .hero::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.6);
        }
        
        .hero-content {
            position: relative;
            z-index: 1;
        }
        
        .hero h1 {
            font-size: 2.5rem;
            margin-bottom: 1rem;
        }
        
        .hero p {
            font-size: 1.2rem;
            max-width: 700px;
            margin: 0 auto 2rem;
        }
        
        .btn {
            display: inline-block;
            background: var(--accent);
            color: white;
            padding: 10px 20px;
            border-radius: 4px;
            text-decoration: none;
            font-weight: 600;
            transition: all 0.3s;
            border: none;
            cursor: pointer;
        }
        
        .btn:hover {
            background: #e68900;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
        
        .btn-primary {
            background: var(--secondary);
        }
        
        .btn-primary:hover {
            background: #0d47a1;
        }
        
        .btn-small {
            padding: 5px 10px;
            font-size: 0.9rem;
        }
        
        section {
            padding: 3rem 0;
        }
        
        .section-title {
            text-align: center;
            margin-bottom: 2rem;
            color: var(--primary-dark);
            position: relative;
        }
        
        .section-title::after {
            content: '';
            display: block;
            width: 80px;
            height: 4px;
            background: var(--accent);
            margin: 10px auto;
        }
        
        .prediction-cards {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
            gap: 20px;
            margin-bottom: 2rem;
        }
        
        .card {
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            overflow: hidden;
            transition: transform 0.3s;
        }
        
        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 15px rgba(0,0,0,0.1);
        }
        
        .card-header {
            background: var(--primary);
            color: white;
            padding: 15px;
            font-weight: 600;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .league-flag {
            width: 24px;
            height: 16px;
            border-radius: 2px;
        }
        
        .card-body {
            padding: 20px;
        }
        
        .match-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }
        
        .teams {
            display: flex;
            flex-direction: column;
            gap: 10px;
            flex: 1;
        }
        
        .team {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .team-logo {
            width: 30px;
            height: 30px;
            background: #ddd;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.8rem;
            font-weight: bold;
        }
        
        .prediction-options {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-top: 15px;
        }
        
        .prediction-option {
            flex: 1;
            min-width: 80px;
            text-align: center;
            padding: 8px 5px;
            background: #f5f5f5;
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.3s;
            font-size: 0.85rem;
        }
        
        .prediction-option:hover {
            background: #e0e0e0;
        }
        
        .prediction-option.selected {
            background: var(--primary);
            color: white;
        }
        
        .accuracy-meter {
            margin-top: 15px;
        }
        
        .meter-bar {
            height: 10px;
            background: #e0e0e0;
            border-radius: 5px;
            overflow: hidden;
        }
        
        .meter-fill {
            height: 100%;
            background: var(--success);
        }
        
        .accuracy-text {
            display: flex;
            justify-content: space-between;
            margin-top: 5px;
            font-size: 0.9rem;
        }
        
        .team-management {
            background: white;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            margin-bottom: 2rem;
        }
        
        .form-group {
            margin-bottom: 15px;
        }
        
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }
        
        input, select, textarea {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 1rem;
        }
        
        textarea {
            min-height: 100px;
            resize: vertical;
        }
        
        .prediction-history {
            overflow-x: auto;
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
            background: white;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            border-radius: 8px;
            overflow: hidden;
        }
        
        th, td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        
        th {
            background: var(--primary);
            color: white;
            font-weight: 600;
        }
        
        tr:last-child td {
            border-bottom: none;
        }
        
        tr.correct {
            background-color: var(--neon-green);
            color: black;
        }
        
        tr.incorrect {
            background-color: var(--neon-red);
            color: white;
        }
        
        .status-correct {
            color: var(--success);
            font-weight: 600;
        }
        
        .status-incorrect {
            color: var(--danger);
            font-weight: 600;
        }
        
        footer {
            background: var(--dark);
            color: white;
            padding: 2rem 0;
            margin-top: 3rem;
        }
        
        .footer-content {
            display: flex;
            justify-content: space-between;
            flex-wrap: wrap;
            gap: 30px;
        }
        
        .footer-section {
            flex: 1;
            min-width: 250px;
        }
        
        .footer-section h3 {
            margin-bottom: 1rem;
            color: var(--accent);
        }
        
        .footer-links {
            list-style: none;
        }
        
        .footer-links li {
            margin-bottom: 10px;
        }
        
        .footer-links a {
            color: #ddd;
            text-decoration: none;
            transition: color 0.3s;
        }
        
        .footer-links a:hover {
            color: var(--accent);
        }
        
        .social-links {
            display: flex;
            gap: 15px;
            margin-top: 15px;
        }
        
        .social-links a {
            color: white;
            font-size: 1.2rem;
            transition: color 0.3s;
        }
        
        .social-links a:hover {
            color: var(--accent);
        }
        
        .copyright {
            text-align: center;
            margin-top: 2rem;
            padding-top: 1rem;
            border-top: 1px solid #444;
        }
        
        .website-predictions {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            margin-top: 2rem;
        }
        
        .website-card {
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        .website-header {
            padding: 15px;
            color: white;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .betway-header {
            background: var(--betway);
        }
        
        .hollywood-header {
            background: var(--hollywood);
        }
        
        .bet365-header {
            background: var(--bet365);
        }
        
        .f180score-header {
            background: var(--f180score);
        }
        
        .website-body {
            padding: 20px;
        }
        
        .prediction-result {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
            padding-bottom: 10px;
            border-bottom: 1px solid #eee;
        }
        
        .prediction-value {
            font-weight: 600;
            color: var(--primary);
        }
        
        .custom-teams-section {
            background: white;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            margin-bottom: 2rem;
        }
        
        .custom-teams-form {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }
        
        .form-actions {
            grid-column: 1 / -1;
            display: flex;
            gap: 10px;
        }
        
        .prediction-results {
            margin-top: 2rem;
        }
        
        .results-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
        }
        
        .result-card {
            background: white;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        
        .result-header {
            font-weight: 600;
            margin-bottom: 15px;
            color: var(--primary);
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
        }
        
        .result-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }
        
        .result-value {
            font-weight: 600;
        }
        
        .loading {
            text-align: center;
            padding: 20px;
        }
        
        .spinner {
            border: 4px solid rgba(0, 0, 0, 0.1);
            border-left-color: var(--primary);
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 10px;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        .api-status {
            display: flex;
            align-items: center;
            gap: 5px;
            font-size: 0.9rem;
            margin-top: 5px;
        }
        
        .status-dot {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            display: inline-block;
        }
        
        .status-online {
            background: var(--success);
        }
        
        .status-offline {
            background: var(--danger);
        }
        
        .chart-container {
            background: white;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            margin-top: 2rem;
        }
        
        .api-controls {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
            flex-wrap: wrap;
        }
        
        .match-analysis {
            background: white;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            margin-top: 2rem;
        }
        
        .analysis-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }
        
        .analysis-section {
            margin-bottom: 20px;
        }
        
        .analysis-section h4 {
            margin-bottom: 10px;
            color: var(--primary);
            border-bottom: 1px solid #eee;
            padding-bottom: 5px;
        }
        
        .player-list, .injury-list {
            list-style: none;
        }
        
        .player-list li, .injury-list li {
            padding: 8px 0;
            border-bottom: 1px solid #f0f0f0;
        }
        
        .player-list li:last-child, .injury-list li:last-child {
            border-bottom: none;
        }
        
        .player-rating {
            display: inline-block;
            background: var(--primary);
            color: white;
            padding: 2px 6px;
            border-radius: 4px;
            font-size: 0.8rem;
            margin-left: 5px;
        }
        
        .injury-status {
            display: inline-block;
            padding: 2px 6px;
            border-radius: 4px;
            font-size: 0.8rem;
            margin-left: 5px;
        }
        
        .injury-major {
            background: var(--danger);
            color: white;
        }
        
        .injury-minor {
            background: var(--warning);
            color: black;
        }
        
        .ai-learning-stats {
            display: flex;
            justify-content: space-around;
            margin-top: 20px;
            text-align: center;
            flex-wrap: wrap;
            gap: 15px;
        }
        
        .stat-box {
            padding: 15px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            min-width: 200px;
        }
        
        .stat-value {
            font-size: 2rem;
            font-weight: 700;
            color: var(--primary);
        }
        
        .stat-label {
            font-size: 0.9rem;
            color: var(--dark);
        }
        
        .improvement-indicator {
            font-size: 0.8rem;
            margin-top: 5px;
        }
        
        .positive {
            color: var(--success);
        }
        
        .negative {
            color: var(--danger);
        }
        
        .league-filter {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }
        
        .league-btn {
            padding: 8px 15px;
            background: #e0e0e0;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .league-btn.active {
            background: var(--primary);
            color: white;
        }
        
        .league-btn:hover {
            background: #d0d0d0;
        }
        
        .league-btn.active:hover {
            background: var(--primary-dark);
        }
        
        .quick-prediction {
            background: white;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            margin-bottom: 2rem;
        }
        
        .quick-prediction-form {
            display: grid;
            grid-template-columns: 1fr 1fr auto;
            gap: 15px;
            align-items: end;
        }
        
        .result-input-section {
            background: white;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            margin-top: 2rem;
        }
        
        .result-input-form {
            display: grid;
            grid-template-columns: 1fr 1fr auto;
            gap: 15px;
            align-items: end;
        }
        
        @media (max-width: 768px) {
            .header-content {
                flex-direction: column;
                gap: 15px;
            }
            
            nav ul {
                flex-direction: column;
                gap: 10px;
                text-align: center;
            }
            
            .mobile-menu {
                display: block;
            }
            
            .hero h1 {
                font-size: 2rem;
            }
            
            .prediction-cards {
                grid-template-columns: 1fr;
            }
            
            .custom-teams-form {
                grid-template-columns: 1fr;
            }
            
            .website-predictions {
                grid-template-columns: 1fr;
            }
            
            .ai-learning-stats {
                flex-direction: column;
                gap: 15px;
            }
            
            .quick-prediction-form {
                grid-template-columns: 1fr;
            }
            
            .result-input-form {
                grid-template-columns: 1fr;
            }
            
            .league-filter {
                justify-content: center;
            }
        }
    </style>
</head>
<body>
    <header>
        <div class="container">
            <div class="header-content">
                <div class="logo">
                    <i class="fas fa-robot"></i>
                    <span>Soccer Predictor AI</span>
                </div>
                <div class="mobile-menu">
                    <i class="fas fa-bars"></i>
                </div>
                <nav>
                    <ul>
                        <li><a href="#" class="active">Home</a></li>
                        <li><a href="#predictions">Today's Games</a></li>
                        <li><a href="#quick-predict">Quick Predict</a></li>
                        <li><a href="#history">AI Learning</a></li>
                    </ul>
                </nav>
            </div>
        </div>
    </header>

    <section class="hero">
        <div class="container">
            <div class="hero-content">
                <h1>AI-Powered Soccer Predictions</h1>
                <p>Self-improving AI that learns from every prediction to deliver increasingly accurate results</p>
                <a href="#quick-predict" class="btn">Make Your Prediction</a>
            </div>
        </div>
    </section>

    <section id="predictions">
        <div class="container">
            <h2 class="section-title">Today's AI Predictions</h2>
            
            <div class="api-controls">
                <button id="fetch-api-data" class="btn btn-small">Refresh All Leagues</button>
                <div class="api-status">
                    <span class="status-dot status-online"></span>
                    <span>AI Status: Online & Learning</span>
                </div>
            </div>
            
            <div class="league-filter">
                <button class="league-btn active" data-league="all">All Leagues</button>
                <button class="league-btn" data-league="premier">England</button>
                <button class="league-btn" data-league="laliga">Spain</button>
                <button class="league-btn" data-league="seriea">Italy</button>
                <button class="league-btn" data-league="bundesliga">Germany</button>
                <button class="league-btn" data-league="ligue1">France</button>
                <button class="league-btn" data-league="premier-division">Ireland</button>
                <button class="league-btn" data-league="allsvenskan">Sweden</button>
                <button class="league-btn" data-league="psl">South Africa</button>
                <button class="league-btn" data-league="uefa">UEFA</button>
            </div>
            
            <div id="loading-predictions" class="loading" style="display: none;">
                <div class="spinner"></div>
                <p>AI analyzing today's matches worldwide...</p>
            </div>
            
            <div id="predictions-container" class="prediction-cards">
                <!-- Predictions will be loaded here -->
            </div>

            <h3 class="section-title">Betting Site Predictions</h3>
            <div class="website-predictions">
                <div class="website-card">
                    <div class="website-header betway-header">
                        <i class="fas fa-chart-line"></i>
                        <span>Betway Predictions</span>
                    </div>
                    <div class="website-body" id="betway-predictions">
                        <div class="loading">
                            <div class="spinner"></div>
                            <p>Loading Betway predictions...</p>
                        </div>
                    </div>
                </div>
                
                <div class="website-card">
                    <div class="website-header hollywood-header">
                        <i class="fas fa-dice"></i>
                        <span>Hollywood Bets</span>
                    </div>
                    <div class="website-body" id="hollywood-predictions">
                        <div class="loading">
                            <div class="spinner"></div>
                            <p>Loading Hollywood Bets predictions...</p>
                        </div>
                    </div>
                </div>
                
                <div class="website-card">
                    <div class="website-header f180score-header">
                        <i class="fas fa-chart-pie"></i>
                        <span>180Score Insights</span>
                    </div>
                    <div class="website-body" id="f180score-predictions">
                        <div class="loading">
                            <div class="spinner"></div>
                            <p>Loading 180Score predictions...</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <section id="quick-predict">
        <div class="container">
            <h2 class="section-title">Quick Team Prediction</h2>
            
            <div class="quick-prediction">
                <div class="quick-prediction-form">
                    <div class="form-group">
                        <label for="quick-home-team">Home Team</label>
                        <input type="text" id="quick-home-team" placeholder="Enter home team name">
                    </div>
                    <div class="form-group">
                        <label for="quick-away-team">Away Team</label>
                        <input type="text" id="quick-away-team" placeholder="Enter away team name">
                    </div>
                    <div class="form-group">
                        <button id="quick-predict-btn" class="btn btn-primary">Get AI Prediction</button>
                    </div>
                </div>
            </div>

            <div id="quick-prediction-results" class="prediction-results" style="display: none;">
                <h3 class="section-title">AI Prediction Results</h3>
                
                <div class="results-grid">
                    <div class="result-card">
                        <div class="result-header">AI Prediction</div>
                        <div class="result-item">
                            <span>Match Result</span>
                            <span class="result-value" id="quick-match-result">-</span>
                        </div>
                        <div class="result-item">
                            <span>Both Teams to Score</span>
                            <span class="result-value" id="quick-btts">-</span>
                        </div>
                        <div class="result-item">
                            <span>Matchbet & BTTS</span>
                            <span class="result-value" id="quick-matchbet-btts">-</span>
                        </div>
                        <div class="result-item">
                            <span>Confidence</span>
                            <span class="result-value" id="quick-confidence">-</span>
                        </div>
                        <div class="result-item">
                            <span>AI Model Version</span>
                            <span class="result-value" id="quick-ai-version">v2.1.5</span>
                        </div>
                    </div>
                    
                    <div class="result-card">
                        <div class="result-header">Betway Prediction</div>
                        <div class="result-item">
                            <span>Match Result</span>
                            <span class="result-value" id="quick-betway-match">-</span>
                        </div>
                        <div class="result-item">
                            <span>Both Teams to Score</span>
                            <span class="result-value" id="quick-betway-btts">-</span>
                        </div>
                        <div class="result-item">
                            <span>Matchbet & BTTS</span>
                            <span class="result-value" id="quick-betway-combined">-</span>
                        </div>
                    </div>
                    
                    <div class="result-card">
                        <div class="result-header">Hollywood Bets</div>
                        <div class="result-item">
                            <span>Match Result</span>
                            <span class="result-value" id="quick-hollywood-match">-</span>
                        </div>
                        <div class="result-item">
                            <span>Both Teams to Score</span>
                            <span class="result-value" id="quick-hollywood-btts">-</span>
                        </div>
                        <div class="result-item">
                            <span>Matchbet & BTTS</span>
                            <span class="result-value" id="quick-hollywood-combined">-</span>
                        </div>
                    </div>
                </div>
                
                <div class="match-analysis">
                    <h3 class="section-title">Detailed Match Analysis</h3>
                    
                    <div class="analysis-grid">
                        <div class="analysis-section">
                            <h4>Key Players</h4>
                            <ul class="player-list" id="quick-key-players">
                                <!-- Key players will be loaded here -->
                            </ul>
                        </div>
                        
                        <div class="analysis-section">
                            <h4>Injury Report</h4>
                            <ul class="injury-list" id="quick-injury-report">
                                <!-- Injuries will be loaded here -->
                            </ul>
                        </div>
                        
                        <div class="analysis-section">
                            <h4>Weather Conditions</h4>
                            <div id="quick-weather-info">
                                <!-- Weather info will be loaded here -->
                            </div>
                        </div>
                        
                        <div class="analysis-section">
                            <h4>Referee Analysis</h4>
                            <div id="quick-referee-info">
                                <!-- Referee info will be loaded here -->
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="result-input-section">
                    <h3 class="section-title">Track Actual Result</h3>
                    <p>Help the AI learn by providing the actual match result:</p>
                    
                    <div class="result-input-form">
                        <div class="form-group">
                            <label for="actual-home-score">Home Score</label>
                            <input type="number" id="actual-home-score" min="0" max="20" placeholder="Home goals">
                        </div>
                        <div class="form-group">
                            <label for="actual-away-score">Away Score</label>
                            <input type="number" id="actual-away-score" min="0" max="20" placeholder="Away goals">
                        </div>
                        <div class="form-group">
                            <button id="save-actual-result" class="btn btn-primary">Save Result & Update AI</button>
                        </div>
                    </div>
                </div>
                
                <div class="chart-container">
                    <canvas id="quick-prediction-chart"></canvas>
                </div>
            </div>
        </div>
    </section>

    <section id="history">
        <div class="container">
            <h2 class="section-title">AI Learning & Prediction History</h2>
            
            <div class="ai-learning-stats">
                <div class="stat-box">
                    <div class="stat-value" id="ai-accuracy">78.5%</div>
                    <div class="stat-label">AI Prediction Accuracy</div>
                    <div class="improvement-indicator positive">+2.3% this month</div>
                </div>
                <div class="stat-box">
                    <div class="stat-value" id="total-predictions">1,247</div>
                    <div class="stat-label">Total Predictions</div>
                    <div class="improvement-indicator positive">+142 this month</div>
                </div>
                <div class="stat-box">
                    <div class="stat-value" id="model-version">v2.1.5</div>
                    <div class="stat-label">AI Model Version</div>
                    <div class="improvement-indicator positive">Retrained: 2023-11-05</div>
                </div>
                <div class="stat-box">
                    <div class="stat-value" id="leagues-covered">24</div>
                    <div class="stat-label">Leagues Covered</div>
                    <div class="improvement-indicator positive">+5 this month</div>
                </div>
            </div>
            
            <div class="prediction-history">
                <table>
                    <thead>
                        <tr>
                            <th>Match</th>
                            <th>League</th>
                            <th>AI Prediction</th>
                            <th>Actual Result</th>
                            <th>AI Correct</th>
                            <th>Date</th>
                        </tr>
                    </thead>
                    <tbody id="history-body">
                        <!-- History will be loaded here -->
                    </tbody>
                </table>
            </div>
        </div>
    </section>

    <footer>
        <div class="container">
            <div class="footer-content">
                <div class="footer-section">
                    <h3>Soccer Predictor AI</h3>
                    <p>Self-learning AI that continuously improves its prediction accuracy through machine learning and user feedback.</p>
                    <div class="social-links">
                        <a href="#"><i class="fab fa-github"></i></a>
                        <a href="#"><i class="fab fa-twitter"></i></a>
                        <a href="#"><i class="fab fa-linkedin"></i></a>
                    </div>
                </div>
                <div class="footer-section">
                    <h3>Quick Links</h3>
                    <ul class="footer-links">
                        <li><a href="#">Home</a></li>
                        <li><a href="#predictions">Today's Games</a></li>
                        <li><a href="#quick-predict">Quick Predict</a></li>
                        <li><a href="#history">AI Learning</a></li>
                    </ul>
                </div>
                <div class="footer-section">
                    <h3>Data Sources</h3>
                    <ul class="footer-links">
                        <li><a href="https://www.football-data.org/">Football Data API</a></li>
                        <li><a href="https://thesportsdb.com/">The Sports DB</a></li>
                        <li><a href="https://www.hollywoodbets.net/">Hollywood Bets</a></li>
                        <li><a href="https://www.betway.com/">Betway</a></li>
                        <li><a href="https://180score.com/">180Score</a></li>
                    </ul>
                </div>
            </div>
            <div class="copyright">
                <p>&copy; 2023 Soccer Predictor AI. All rights reserved. | AI Model v2.1.5</p>
            </div>
        </div>
    </footer>

    <script>
        // Global Leagues Data
        const GLOBAL_LEAGUES = {
            'premier': {
                name: 'Premier League',
                country: 'England',
                flag: '🇬🇧',
                teams: ['Arsenal', 'Aston Villa', 'Bournemouth', 'Brentford', 'Brighton', 'Burnley', 'Chelsea', 'Crystal Palace', 'Everton', 'Fulham', 'Liverpool', 'Luton Town', 'Manchester City', 'Manchester United', 'Newcastle United', 'Nottingham Forest', 'Sheffield United', 'Tottenham', 'West Ham', 'Wolves']
            },
            'laliga': {
                name: 'La Liga',
                country: 'Spain',
                flag: '🇪🇸',
                teams: ['Alaves', 'Almeria', 'Athletic Bilbao', 'Atletico Madrid', 'Barcelona', 'Betis', 'Cádiz', 'Celta Vigo', 'Getafe', 'Girona', 'Granada', 'Las Palmas', 'Mallorca', 'Osasuna', 'Rayo Vallecano', 'Real Madrid', 'Real Sociedad', 'Sevilla', 'Valencia', 'Villarreal']
            },
            'seriea': {
                name: 'Serie A',
                country: 'Italy',
                flag: '🇮🇹',
                teams: ['AC Milan', 'Atalanta', 'Bologna', 'Cagliari', 'Empoli', 'Fiorentina', 'Frosinone', 'Genoa', 'Inter', 'Juventus', 'Lazio', 'Lecce', 'Monza', 'Napoli', 'Roma', 'Salernitana', 'Sassuolo', 'Torino', 'Udinese', 'Verona']
            },
            'bundesliga': {
                name: 'Bundesliga',
                country: 'Germany',
                flag: '🇩🇪',
                teams: ['Augsburg', 'Bayer Leverkusen', 'Bayern Munich', 'Bochum', 'Borussia Dortmund', 'Borussia Mönchengladbach', 'Darmstadt', 'Eintracht Frankfurt', 'Freiburg', 'Heidenheim', 'Köln', 'Mainz', 'RB Leipzig', 'Stuttgart', 'Union Berlin', 'Werder Bremen', 'Wolfsburg']
            },
            'ligue1': {
                name: 'Ligue 1',
                country: 'France',
                flag: '🇫🇷',
                teams: ['Brest', 'Clermont', 'Le Havre', 'Lens', 'Lille', 'Lorient', 'Lyon', 'Marseille', 'Metz', 'Monaco', 'Montpellier', 'Nantes', 'Nice', 'Paris Saint-Germain', 'Reims', 'Rennes', 'Strasbourg', 'Toulouse']
            },
            'premier-division': {
                name: 'Premier Division',
                country: 'Ireland',
                flag: '🇮🇪',
                teams: ['Bohemians', 'Cork City', 'Derry City', 'Drogheda United', 'Dundalk', 'Shamrock Rovers', 'Shelbourne', 'Sligo Rovers', 'St Patrick\'s Athletic', 'Waterford', 'Galway United']
            },
            'allsvenskan': {
                name: 'Allsvenskan',
                country: 'Sweden',
                flag: '🇸🇪',
                teams: ['AIK', 'BK Häcken', 'Djurgårdens IF', 'Elfsborg', 'GAIS', 'Halmstads BK', 'Hammarby IF', 'IF Brommapojkarna', 'IFK Göteborg', 'IFK Norrköping', 'IFK Värnamo', 'IK Sirius', 'Kalmar FF', 'Malmö FF', 'Mjällby AIF', 'Varbergs BoIS']
            },
            'psl': {
                name: 'Premier Soccer League',
                country: 'South Africa',
                flag: '🇿🇦',
                teams: ['AmaZulu', 'Cape Town City', 'Cape Town Spurs', 'Chippa United', 'Golden Arrows', 'Kaizer Chiefs', 'Mamelodi Sundowns', 'Moroka Swallows', 'Orlando Pirates', 'Polokwane City', 'Royal AM', 'Sekhukhune United', 'Stellenbosch', 'TS Galaxy', 'SuperSport United', 'Richards Bay']
            },
            'uefa': {
                name: 'UEFA Champions League',
                country: 'Europe',
                flag: '🇪🇺',
                teams: ['Arsenal', 'Atletico Madrid', 'Barcelona', 'Bayern Munich', 'Borussia Dortmund', 'Inter', 'Lazio', 'Manchester City', 'Napoli', 'Paris Saint-Germain', 'Porto', 'PSV', 'Real Madrid', 'Real Sociedad', 'RB Leipzig', 'Copenhagen']
            }
        };

        // AI Learning System
        class GlobalSoccerAIPredictor {
            constructor() {
                this.modelVersion = "v2.1.5";
                this.predictionHistory = JSON.parse(localStorage.getItem('globalSoccerAIHistory')) || [];
                this.aiAccuracy = this.calculateAccuracy();
                this.learningRate = 0.05;
                this.leaguesCovered = Object.keys(GLOBAL_LEAGUES).length;
                this.currentPrediction = null;
            }

            // Make a prediction based on team data
            predictMatch(homeTeam, awayTeam, league, factors = {}) {
                const homeStrength = this.calculateTeamStrength(homeTeam, factors);
                const awayStrength = this.calculateTeamStrength(awayTeam, factors);
                
                // Apply home advantage
                const homeAdvantage = 0.15;
                const adjustedHomeStrength = homeStrength + homeAdvantage;
                
                // Calculate probabilities
                const totalStrength = adjustedHomeStrength + awayStrength;
                const homeWinProb = adjustedHomeStrength / totalStrength;
                const awayWinProb = awayStrength / totalStrength;
                const drawProb = 0.25 * (1 - Math.abs(homeWinProb - awayWinProb));
                
                // Normalize probabilities
                const sum = homeWinProb + awayWinProb + drawProb;
                const normalizedHomeWin = homeWinProb / sum;
                const normalizedAwayWin = awayWinProb / sum;
                const normalizedDraw = drawProb / sum;
                
                // Determine match result prediction
                let matchResult, confidence;
                if (normalizedHomeWin > normalizedAwayWin && normalizedHomeWin > normalizedDraw) {
                    matchResult = `${homeTeam} Win`;
                    confidence = Math.round(normalizedHomeWin * 100);
                } else if (normalizedAwayWin > normalizedHomeWin && normalizedAwayWin > normalizedDraw) {
                    matchResult = `${awayTeam} Win`;
                    confidence = Math.round(normalizedAwayWin * 100);
                } else {
                    matchResult = 'Draw';
                    confidence = Math.round(normalizedDraw * 100);
                }
                
                // Determine BTTS probability
                const bttsProb = 0.5 + (homeStrength * 0.15) + (awayStrength * 0.15);
                const bttsPrediction = bttsProb > 0.5 ? 'Yes' : 'No';
                
                // Determine Matchbet & BTTS prediction
                let matchbetBtts;
                if (matchResult.includes('Win') && bttsPrediction === 'Yes') {
                    matchbetBtts = `${matchResult} & BTTS`;
                } else {
                    matchbetBtts = 'Not Recommended';
                }
                
                // Store current prediction for later learning
                this.currentPrediction = {
                    homeTeam,
                    awayTeam,
                    league,
                    aiPrediction: {
                        matchResult,
                        btts: bttsPrediction,
                        matchbetBtts,
                        confidence
                    },
                    timestamp: new Date().toISOString()
                };
                
                return {
                    matchResult,
                    btts: bttsPrediction,
                    matchbetBtts,
                    confidence,
                    modelVersion: this.modelVersion,
                    factors: this.generateFactorAnalysis(homeTeam, awayTeam, factors)
                };
            }

            // Save actual result and update AI learning
            saveActualResult(homeScore, awayScore) {
                if (!this.currentPrediction) {
                    alert('No prediction to update. Please make a prediction first.');
                    return;
                }
                
                // Determine actual result
                let actualResult;
                if (homeScore > awayScore) {
                    actualResult = `${this.currentPrediction.homeTeam} Win`;
                } else if (awayScore > homeScore) {
                    actualResult = `${this.currentPrediction.awayTeam} Win`;
                } else {
                    actualResult = 'Draw';
                }
                
                // Determine BTTS result
                const actualBtts = (homeScore > 0 && awayScore > 0) ? 'Yes' : 'No';
                
                // Check if AI prediction was correct
                const aiCorrect = this.currentPrediction.aiPrediction.matchResult === actualResult;
                
                // Add to history
                const historyEntry = {
                    ...this.currentPrediction,
                    actualResult: `${homeScore}-${awayScore}`,
                    actualBtts,
                    aiCorrect,
                    id: Date.now()
                };
                
                this.predictionHistory.unshift(historyEntry);
                
                // Keep only last 100 predictions
                if (this.predictionHistory.length > 100) {
                    this.predictionHistory = this.predictionHistory.slice(0, 100);
                }
                
                // Save to localStorage
                localStorage.setItem('globalSoccerAIHistory', JSON.stringify(this.predictionHistory));
                
                // Update AI accuracy
                this.aiAccuracy = this.calculateAccuracy();
                this.updateAIStats();
                
                // Retrain AI if accuracy drops below threshold
                if (this.aiAccuracy < 70) {
                    this.retrainModel();
                }
                
                // Clear current prediction
                this.currentPrediction = null;
                
                return historyEntry;
            }

            // Calculate team strength based on various factors
            calculateTeamStrength(teamName, factors) {
                // Base strength from team reputation
                let baseStrength = 5;
                
                // Find which league the team belongs to
                let teamLeague = null;
                for (const [leagueId, league] of Object.entries(GLOBAL_LEAGUES)) {
                    if (league.teams.includes(teamName)) {
                        teamLeague = leagueId;
                        break;
                    }
                }
                
                // Adjust base strength based on league reputation
                const leagueMultipliers = {
                    'premier': 1.0,
                    'laliga': 0.95,
                    'seriea': 0.92,
                    'bundesliga': 0.93,
                    'ligue1': 0.90,
                    'uefa': 1.05,
                    'premier-division': 0.75,
                    'allsvenskan': 0.78,
                    'psl': 0.80
                };
                
                if (teamLeague && leagueMultipliers[teamLeague]) {
                    baseStrength *= leagueMultipliers[teamLeague];
                }
                
                // Adjust based on team reputation
                const reputationFactors = {
                    'manchester city': 9.5, 'liverpool': 9.2, 'real madrid': 9.7, 'barcelona': 9.3,
                    'bayern munich': 9.4, 'psg': 9.1, 'juventus': 8.8, 'ac milan': 8.5,
                    'chelsea': 8.7, 'arsenal': 8.6, 'manchester united': 8.5, 'tottenham': 8.2,
                    'mamelodi sundowns': 7.5, 'kaizer chiefs': 7.2, 'orlando pirates': 7.3,
                    'shamrock rovers': 6.8, 'malmö ff': 7.0
                };
                
                const teamKey = teamName.toLowerCase();
                if (reputationFactors[teamKey]) {
                    baseStrength = reputationFactors[teamKey];
                }
                
                // Adjust based on form (last 5 games)
                if (factors.form) {
                    const formMultiplier = factors.form === 'excellent' ? 1.2 : 
                                          factors.form === 'good' ? 1.1 :
                                          factors.form === 'poor' ? 0.9 : 0.8;
                    baseStrength *= formMultiplier;
                }
                
                // Adjust based on injuries
                if (factors.injuries && factors.injuries > 0) {
                    const injuryPenalty = 0.05 * factors.injuries;
                    baseStrength *= (1 - injuryPenalty);
                }
                
                return Math.min(10, baseStrength);
            }

            // Generate detailed factor analysis
            generateFactorAnalysis(homeTeam, awayTeam, factors) {
                return {
                    keyPlayers: this.generateKeyPlayers(homeTeam, awayTeam),
                    injuries: this.generateInjuryReport(homeTeam, awayTeam),
                    weather: this.generateWeatherAnalysis(),
                    referee: this.generateRefereeAnalysis(),
                    form: this.generateFormAnalysis(homeTeam, awayTeam)
                };
            }

            // Generate mock key players data
            generateKeyPlayers(homeTeam, awayTeam) {
                const players = {
                    'Manchester City': [
                        { name: 'Erling Haaland', position: 'Forward', rating: 9.5 },
                        { name: 'Kevin De Bruyne', position: 'Midfielder', rating: 9.3 },
                        { name: 'Rodri', position: 'Midfielder', rating: 8.8 }
                    ],
                    'Liverpool': [
                        { name: 'Mohamed Salah', position: 'Forward', rating: 9.2 },
                        { name: 'Virgil van Dijk', position: 'Defender', rating: 8.9 },
                        { name: 'Alisson Becker', position: 'Goalkeeper', rating: 8.8 }
                    ],
                    'Real Madrid': [
                        { name: 'Karim Benzema', position: 'Forward', rating: 9.1 },
                        { name: 'Luka Modrić', position: 'Midfielder', rating: 8.9 },
                        { name: 'Vinicius Junior', position: 'Forward', rating: 8.8 }
                    ],
                    'Barcelona': [
                        { name: 'Robert Lewandowski', position: 'Forward', rating: 9.0 },
                        { name: 'Pedri', position: 'Midfielder', rating: 8.7 },
                        { name: 'Marc-André ter Stegen', position: 'Goalkeeper', rating: 8.6 }
                    ],
                    'Mamelodi Sundowns': [
                        { name: 'Peter Shalulile', position: 'Forward', rating: 8.2 },
                        { name: 'Themba Zwane', position: 'Midfielder', rating: 7.9 },
                        { name: 'Ronwen Williams', position: 'Goalkeeper', rating: 7.8 }
                    ],
                    'Shamrock Rovers': [
                        { name: 'Rory Gaffney', position: 'Forward', rating: 7.0 },
                        { name: 'Jack Byrne', position: 'Midfielder', rating: 7.2 },
                        { name: 'Lee Grace', position: 'Defender', rating: 6.8 }
                    ]
                };
                
                const homePlayers = players[homeTeam] || [
                    { name: 'Star Player 1', position: 'Forward', rating: 7.5 + Math.random() },
                    { name: 'Key Midfielder', position: 'Midfielder', rating: 7.2 + Math.random() },
                    { name: 'Solid Defender', position: 'Defender', rating: 6.9 + Math.random() }
                ];
                
                const awayPlayers = players[awayTeam] || [
                    { name: 'Top Scorer', position: 'Forward', rating: 7.4 + Math.random() },
                    { name: 'Playmaker', position: 'Midfielder', rating: 7.1 + Math.random() },
                    { name: 'Captain', position: 'Defender', rating: 6.8 + Math.random() }
                ];
                
                return { home: homePlayers, away: awayPlayers };
            }

            // Generate mock injury report
            generateInjuryReport(homeTeam, awayTeam) {
                const injuries = {
                    'Manchester City': [
                        { player: 'John Stones', type: 'Hamstring', severity: 'minor', return: '1 week' }
                    ],
                    'Liverpool': [
                        { player: 'Thiago Alcântara', type: 'Hip', severity: 'major', return: '2 months' }
                    ],
                    'Real Madrid': [
                        { player: 'Ferland Mendy', type: 'Calf', severity: 'minor', return: '2 weeks' }
                    ],
                    'Barcelona': [
                        { player: 'Ousmane Dembélé', type: 'Thigh', severity: 'major', return: '6 weeks' }
                    ],
                    'Mamelodi Sundowns': [
                        { player: 'Mosa Lebusa', type: 'Ankle', severity: 'minor', return: '10 days' }
                    ]
                };
                
                const homeInjuries = injuries[homeTeam] || (Math.random() > 0.7 ? [
                    { player: 'Key Player', type: 'Muscle', severity: 'minor', return: '1-2 weeks' }
                ] : []);
                
                const awayInjuries = injuries[awayTeam] || (Math.random() > 0.7 ? [
                    { player: 'Important Player', type: 'Knock', severity: 'minor', return: '1 week' }
                ] : []);
                
                return { home: homeInjuries, away: awayInjuries };
            }

            // Generate mock weather analysis
            generateWeatherAnalysis() {
                const conditions = [
                    { condition: 'Clear', temperature: 18, wind: 12, impact: 'None' },
                    { condition: 'Rainy', temperature: 12, wind: 20, impact: 'High - favors defensive play' },
                    { condition: 'Cloudy', temperature: 15, wind: 15, impact: 'Low' },
                    { condition: 'Windy', temperature: 14, wind: 25, impact: 'Medium - affects passing accuracy' }
                ];
                
                return conditions[Math.floor(Math.random() * conditions.length)];
            }

            // Generate mock referee analysis
            generateRefereeAnalysis() {
                const referees = [
                    { name: 'Michael Oliver', avgCards: 3.2, bias: 'None', strictness: 'Medium' },
                    { name: 'Anthony Taylor', avgCards: 4.1, bias: 'Slight home advantage', strictness: 'High' },
                    { name: 'Martin Atkinson', avgCards: 2.8, bias: 'None', strictness: 'Low' },
                    { name: 'Paul Tierney', avgCards: 3.5, bias: 'Slight away advantage', strictness: 'Medium' }
                ];
                
                return referees[Math.floor(Math.random() * referees.length)];
            }

            // Generate form analysis
            generateFormAnalysis(homeTeam, awayTeam) {
                const forms = ['excellent', 'good', 'average', 'poor'];
                return {
                    home: forms[Math.floor(Math.random() * forms.length)],
                    away: forms[Math.floor(Math.random() * forms.length)]
                };
            }

            // Calculate AI accuracy based on prediction history
            calculateAccuracy() {
                const predictionsWithResults = this.predictionHistory.filter(p => p.actualResult);
                
                if (predictionsWithResults.length === 0) return 0;
                
                const correctPredictions = predictionsWithResults.filter(p => p.aiCorrect).length;
                return Math.round((correctPredictions / predictionsWithResults.length) * 100 * 10) / 10;
            }

            // Update AI stats in the UI
            updateAIStats() {
                document.getElementById('ai-accuracy').textContent = `${this.aiAccuracy}%`;
                document.getElementById('total-predictions').textContent = this.predictionHistory.length;
                document.getElementById('model-version').textContent = this.modelVersion;
                document.getElementById('leagues-covered').textContent = this.leaguesCovered;
                
                this.renderPredictionHistory();
            }

            // Render prediction history to the table
            renderPredictionHistory() {
                const historyBody = document.getElementById('history-body');
                historyBody.innerHTML = '';
                
                this.predictionHistory.forEach(prediction => {
                    const row = document.createElement('tr');
                    
                    // Determine row class based on AI correctness
                    if (prediction.aiCorrect !== undefined) {
                        row.className = prediction.aiCorrect ? 'correct' : 'incorrect';
                    }
                    
                    row.innerHTML = `
                        <td>${prediction.homeTeam} vs ${prediction.awayTeam}</td>
                        <td>${prediction.league || 'Custom'}</td>
                        <td>${prediction.aiPrediction?.matchResult || 'N/A'}</td>
                        <td>${prediction.actualResult || 'Pending'}</td>
                        <td>${prediction.aiCorrect !== undefined ? (prediction.aiCorrect ? '✓' : '✗') : 'Pending'}</td>
                        <td>${new Date(prediction.timestamp).toLocaleDateString()}</td>
                    `;
                    
                    historyBody.appendChild(row);
                });
            }

            // Retrain AI model with new data (simulated)
            retrainModel() {
                // In a real application, this would trigger a retraining process
                console.log('Retraining AI model with new data...');
                
                // Simulate model improvement
                const improvement = Math.random() * 0.5; // 0-0.5% improvement
                this.learningRate += improvement / 100;
                
                // Update model version
                const versionParts = this.modelVersion.split('.');
                versionParts[2] = parseInt(versionParts[2]) + 1;
                this.modelVersion = versionParts.join('.');
                
                // Update UI
                this.updateAIStats();
                
                alert(`AI model retrained to version ${this.modelVersion} based on new data!`);
                
                return this.modelVersion;
            }
        }

        // Initialize AI
        const globalSoccerAI = new GlobalSoccerAIPredictor();

        // Mobile menu toggle
        document.querySelector('.mobile-menu').addEventListener('click', function() {
            document.querySelector('nav ul').classList.toggle('show');
        });

        // League filter buttons
        document.querySelectorAll('.league-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                // Remove active class from all buttons
                document.querySelectorAll('.league-btn').forEach(b => b.classList.remove('active'));
                // Add active class to clicked button
                this.classList.add('active');
                
                const league = this.dataset.league;
                filterMatchesByLeague(league);
            });
        });

        // Filter matches by league
        function filterMatchesByLeague(league) {
            const cards = document.querySelectorAll('.prediction-card');
            
            cards.forEach(card => {
                if (league === 'all' || card.dataset.league === league) {
                    card.style.display = 'block';
                } else {
                    card.style.display = 'none';
                }
            });
        }

        // Fetch API data button
        document.getElementById('fetch-api-data').addEventListener('click', function() {
            fetchLiveData();
        });

        // Quick prediction button
        document.getElementById('quick-predict-btn').addEventListener('click', function() {
            const homeTeam = document.getElementById('quick-home-team').value;
            const awayTeam = document.getElementById('quick-away-team').value;
            
            if(homeTeam && awayTeam) {
                // Show results section
                document.getElementById('quick-prediction-results').style.display = 'block';
                
                // Generate AI prediction
                const factors = {};
                const aiPrediction = globalSoccerAI.predictMatch(homeTeam, awayTeam, 'Custom', factors);
                
                // Display AI prediction
                document.getElementById('quick-match-result').textContent = aiPrediction.matchResult;
                document.getElementById('quick-btts').textContent = aiPrediction.btts;
                document.getElementById('quick-matchbet-btts').textContent = aiPrediction.matchbetBtts;
                document.getElementById('quick-confidence').textContent = `${aiPrediction.confidence}%`;
                document.getElementById('quick-ai-version').textContent = aiPrediction.modelVersion;
                
                // Generate betting site predictions
                const betwayPrediction = generateBettingSitePrediction(homeTeam, awayTeam, 'betway');
                document.getElementById('quick-betway-match').textContent = betwayPrediction.matchResult;
                document.getElementById('quick-betway-btts').textContent = betwayPrediction.btts;
                document.getElementById('quick-betway-combined').textContent = betwayPrediction.combined;
                
                const hollywoodPrediction = generateBettingSitePrediction(homeTeam, awayTeam, 'hollywood');
                document.getElementById('quick-hollywood-match').textContent = hollywoodPrediction.matchResult;
                document.getElementById('quick-hollywood-btts').textContent = hollywoodPrediction.btts;
                document.getElementById('quick-hollywood-combined').textContent = hollywoodPrediction.combined;
                
                // Display detailed analysis
                displayQuickDetailedAnalysis(aiPrediction.factors);
                
                // Create prediction comparison chart
                createQuickPredictionChart(aiPrediction, betwayPrediction, hollywoodPrediction);
                
                // Scroll to results
                document.getElementById('quick-prediction-results').scrollIntoView({ behavior: 'smooth' });
            } else {
                alert('Please enter both team names');
            }
        });

        // Save actual result button
        document.getElementById('save-actual-result').addEventListener('click', function() {
            const homeScore = parseInt(document.getElementById('actual-home-score').value);
            const awayScore = parseInt(document.getElementById('actual-away-score').value);
            
            if (isNaN(homeScore) || isNaN(awayScore)) {
                alert('Please enter valid scores for both teams');
                return;
            }
            
            const result = globalSoccerAI.saveActualResult(homeScore, awayScore);
            
            if (result) {
                alert(`Result saved! ${result.aiCorrect ? 'AI prediction was correct!' : 'AI prediction was incorrect. The model will learn from this.'}`);
                
                // Clear the form
                document.getElementById('actual-home-score').value = '';
                document.getElementById('actual-away-score').value = '';
                
                // Update the history display
                globalSoccerAI.updateAIStats();
            }
        });

        // Generate betting site predictions
        function generateBettingSitePrediction(homeTeam, awayTeam, site) {
            const homeStrength = globalSoccerAI.calculateTeamStrength(homeTeam, {});
            const awayStrength = globalSoccerAI.calculateTeamStrength(awayTeam, {});
            
            // Each site has slightly different algorithms
            let homeWinProb, awayWinProb, drawProb;
            
            switch(site) {
                case 'betway':
                    homeWinProb = (homeStrength + 0.05) / (homeStrength + awayStrength + 0.1);
                    awayWinProb = (awayStrength - 0.05) / (homeStrength + awayStrength + 0.1);
                    drawProb = 1 - homeWinProb - awayWinProb;
                    break;
                case 'hollywood':
                    homeWinProb = (homeStrength - 0.05) / (homeStrength + awayStrength - 0.1);
                    awayWinProb = (awayStrength + 0.05) / (homeStrength + awayStrength - 0.1);
                    drawProb = 1 - homeWinProb - awayWinProb;
                    break;
                default:
                    homeWinProb = homeStrength / (homeStrength + awayStrength);
                    awayWinProb = awayStrength / (homeStrength + awayStrength);
                    drawProb = 1 - homeWinProb - awayWinProb;
            }
            
            let matchResult;
            if (homeWinProb > awayWinProb && homeWinProb > drawProb) {
                matchResult = `${homeTeam} Win`;
            } else if (awayWinProb > homeWinProb && awayWinProb > drawProb) {
                matchResult = `${awayTeam} Win`;
            } else {
                matchResult = 'Draw';
            }
            
            // BTTS prediction
            const bttsProb = 0.5 + (homeStrength * 0.15) + (awayStrength * 0.15);
            const btts = bttsProb > 0.5 ? 'Yes' : 'No';
            
            // Matchbet & BTTS
            let combined;
            if (matchResult.includes('Win') && btts === 'Yes') {
                combined = `${matchResult} & BTTS`;
            } else {
                combined = 'Not Recommended';
            }
            
            return {
                matchResult,
                btts,
                combined
            };
        }

        // Display detailed analysis for quick prediction
        function displayQuickDetailedAnalysis(factors) {
            // Key Players
            const keyPlayersList = document.getElementById('quick-key-players');
            keyPlayersList.innerHTML = '';
            
            [...factors.keyPlayers.home, ...factors.keyPlayers.away].forEach(player => {
                const li = document.createElement('li');
                li.innerHTML = `${player.name} (${player.position}) <span class="player-rating">${player.rating.toFixed(1)}/10</span>`;
                keyPlayersList.appendChild(li);
            });
            
            // Injury Report
            const injuryList = document.getElementById('quick-injury-report');
            injuryList.innerHTML = '';
            
            [...factors.injuries.home, ...factors.injuries.away].forEach(injury => {
                const li = document.createElement('li');
                li.innerHTML = `${injury.player} - ${injury.type} <span class="injury-status ${injury.severity === 'major' ? 'injury-major' : 'injury-minor'}">${injury.severity}</span>`;
                injuryList.appendChild(li);
            });
            
            // Weather Info
            const weatherInfo = document.getElementById('quick-weather-info');
            weatherInfo.innerHTML = `
                <p><strong>Condition:</strong> ${factors.weather.condition}</p>
                <p><strong>Temperature:</strong> ${factors.weather.temperature}°C</p>
                <p><strong>Wind:</strong> ${factors.weather.wind} km/h</p>
                <p><strong>Impact:</strong> ${factors.weather.impact}</p>
            `;
            
            // Referee Info
            const refereeInfo = document.getElementById('quick-referee-info');
            refereeInfo.innerHTML = `
                <p><strong>Referee:</strong> ${factors.referee.name}</p>
                <p><strong>Avg. Cards per Game:</strong> ${factors.referee.avgCards}</p>
                <p><strong>Bias:</strong> ${factors.referee.bias}</p>
                <p><strong>Strictness:</strong> ${factors.referee.strictness}</p>
            `;
        }

        // Create prediction comparison chart for quick prediction
        function createQuickPredictionChart(aiPrediction, betwayPrediction, hollywoodPrediction) {
            const ctx = document.getElementById('quick-prediction-chart').getContext('2d');
            
            // Convert predictions to numerical values for chart
            const ourValue = aiPrediction.confidence;
            const betwayValue = Math.floor(Math.random() * 20) + 70; // Random between 70-90
            const hollywoodValue = Math.floor(Math.random() * 20) + 65; // Random between 65-85
            
            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: ['Our Algorithm', 'Betway', 'Hollywood Bets'],
                    datasets: [{
                        label: 'Prediction Confidence %',
                        data: [ourValue, betwayValue, hollywoodValue],
                        backgroundColor: [
                            'rgba(46, 125, 50, 0.7)',
                            'rgba(0, 166, 81, 0.7)',
                            'rgba(230, 0, 126, 0.7)'
                        ],
                        borderColor: [
                            'rgb(46, 125, 50)',
                            'rgb(0, 166, 81)',
                            'rgb(230, 0, 126)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 100,
                            title: {
                                display: true,
                                text: 'Confidence %'
                            }
                        }
                    }
                }
            });
        }

        // Fetch live data from APIs
        async function fetchLiveData() {
            // Show loading
            document.getElementById('loading-predictions').style.display = 'block';
            document.getElementById('predictions-container').innerHTML = '';
            
            try {
                let matches = [];
                
                // Generate matches for all leagues
                for (const [leagueId, league] of Object.entries(GLOBAL_LEAGUES)) {
                    const leagueMatches = generateLeagueMatches(leagueId, league);
                    matches = matches.concat(leagueMatches);
                }
                
                // Render matches
                renderMatches(matches);
                
                // Fetch betting site predictions
                fetchBettingSitePredictions();
                
            } catch (error) {
                console.error('Error fetching data:', error);
                document.getElementById('predictions-container').innerHTML = `
                    <div class="card">
                        <div class="card-body">
                            <p>Error loading match data. Please try again later.</p>
                        </div>
                    </div>
                `;
            } finally {
                document.getElementById('loading-predictions').style.display = 'none';
            }
        }

        // Generate matches for a specific league
        function generateLeagueMatches(leagueId, league) {
            const matches = [];
            const teams = league.teams;
            
            // Generate 3-5 matches per league
            const numMatches = 3 + Math.floor(Math.random() * 3);
            
            for (let i = 0; i < numMatches; i++) {
                // Select random teams
                let homeTeam, awayTeam;
                do {
                    homeTeam = teams[Math.floor(Math.random() * teams.length)];
                    awayTeam = teams[Math.floor(Math.random() * teams.length)];
                } while (homeTeam === awayTeam);
                
                // Generate match date (today or tomorrow)
                const today = new Date();
                const matchDate = new Date(today);
                matchDate.setDate(today.getDate() + Math.floor(Math.random() * 2));
                matchDate.setHours(12 + Math.floor(Math.random() * 10), 0, 0, 0);
                
                matches.push({
                    id: `${leagueId}-${i}`,
                    competition: league.name,
                    country: league.country,
                    flag: league.flag,
                    homeTeam,
                    awayTeam,
                    date: matchDate.toISOString(),
                    venue: `${homeTeam} Stadium`
                });
            }
            
            return matches;
        }

        // Render matches to the DOM
        function renderMatches(matches) {
            const container = document.getElementById('predictions-container');
            container.innerHTML = '';
            
            matches.forEach(match => {
                // Generate AI prediction for this match
                const factors = {};
                const aiPrediction = globalSoccerAI.predictMatch(match.homeTeam, match.awayTeam, match.competition, factors);
                
                const card = document.createElement('div');
                card.className = 'card prediction-card';
                card.dataset.league = getLeagueId(match.competition);
                
                card.innerHTML = `
                    <div class="card-header">
                        <span>${match.competition}</span>
                        <span>${match.flag}</span>
                    </div>
                    <div class="card-body">
                        <div class="match-info">
                            <div class="teams">
                                <div class="team">
                                    <div class="team-logo">${getTeamAbbreviation(match.homeTeam)}</div>
                                    <span>${match.homeTeam}</span>
                                </div>
                                <div class="vs">VS</div>
                                <div class="team">
                                    <div class="team-logo">${getTeamAbbreviation(match.awayTeam)}</div>
                                    <span>${match.awayTeam}</span>
                                </div>
                            </div>
                            <div class="match-time">${formatMatchTime(match.date)}</div>
                        </div>
                        <div class="prediction-options">
                            <div class="prediction-option ${aiPrediction.matchResult.includes('Win') ? 'selected' : ''}">${aiPrediction.matchResult}</div>
                            <div class="prediction-option ${aiPrediction.btts === 'Yes' ? 'selected' : ''}">BTTS ${aiPrediction.btts}</div>
                            <div class="prediction-option ${aiPrediction.matchbetBtts !== 'Not Recommended' ? 'selected' : ''}">${aiPrediction.matchbetBtts}</div>
                        </div>
                        <div class="accuracy-meter">
                            <div class="meter-bar">
                                <div class="meter-fill" style="width: ${aiPrediction.confidence}%"></div>
                            </div>
                            <div class="accuracy-text">
                                <span>AI Confidence</span>
                                <span>${aiPrediction.confidence}%</span>
                            </div>
                        </div>
                    </div>
                `;
                
                container.appendChild(card);
            });
        }

        // Get league ID from competition name
        function getLeagueId(competitionName) {
            for (const [id, league] of Object.entries(GLOBAL_LEAGUES)) {
                if (league.name === competitionName) {
                    return id;
                }
            }
            return 'other';
        }

        // Fetch betting site predictions (simulated)
        function fetchBettingSitePredictions() {
            // Simulate scraping delay
            setTimeout(() => {
                // Betway predictions
                const betwayContainer = document.getElementById('betway-predictions');
                betwayContainer.innerHTML = '';
                
                // Generate 6-8 random predictions for Betway
                for (let i = 0; i < 6 + Math.floor(Math.random() * 3); i++) {
                    const leagueKeys = Object.keys(GLOBAL_LEAGUES);
                    const randomLeague = GLOBAL_LEAGUES[leagueKeys[Math.floor(Math.random() * leagueKeys.length)]];
                    const homeTeam = randomLeague.teams[Math.floor(Math.random() * randomLeague.teams.length)];
                    let awayTeam;
                    do {
                        awayTeam = randomLeague.teams[Math.floor(Math.random() * randomLeague.teams.length)];
                    } while (homeTeam === awayTeam);
                    
                    const predictionTypes = ['Home Win & BTTS', 'Away Win', 'Draw & BTTS', 'Over 2.5 Goals', 'BTTS - Yes'];
                    const randomPrediction = predictionTypes[Math.floor(Math.random() * predictionTypes.length)];
                    
                    const predictionElement = document.createElement('div');
                    predictionElement.className = 'prediction-result';
                    predictionElement.innerHTML = `
                        <span>${homeTeam} vs ${awayTeam}</span>
                        <span class="prediction-value">${randomPrediction}</span>
                    `;
                    
                    betwayContainer.appendChild(predictionElement);
                }
                
                // Hollywood Bets predictions
                const hollywoodContainer = document.getElementById('hollywood-predictions');
                hollywoodContainer.innerHTML = '';
                
                // Generate 6-8 random predictions for Hollywood Bets
                for (let i = 0; i < 6 + Math.floor(Math.random() * 3); i++) {
                    const leagueKeys = Object.keys(GLOBAL_LEAGUES);
                    const randomLeague = GLOBAL_LEAGUES[leagueKeys[Math.floor(Math.random() * leagueKeys.length)]];
                    const homeTeam = randomLeague.teams[Math.floor(Math.random() * randomLeague.teams.length)];
                    let awayTeam;
                    do {
                        awayTeam = randomLeague.teams[Math.floor(Math.random() * randomLeague.teams.length)];
                    } while (homeTeam === awayTeam);
                    
                    const predictionTypes = ['Home Win', 'Away Win & BTTS', 'Draw', 'Under 2.5 Goals', 'BTTS - No'];
                    const randomPrediction = predictionTypes[Math.floor(Math.random() * predictionTypes.length)];
                    
                    const predictionElement = document.createElement('div');
                    predictionElement.className = 'prediction-result';
                    predictionElement.innerHTML = `
                        <span>${homeTeam} vs ${awayTeam}</span>
                        <span class="prediction-value">${randomPrediction}</span>
                    `;
                    
                    hollywoodContainer.appendChild(predictionElement);
                }
                
                // 180Score predictions
                const f180scoreContainer = document.getElementById('f180score-predictions');
                f180scoreContainer.innerHTML = '';
                
                // Generate 6-8 random predictions for 180Score
                for (let i = 0; i < 6 + Math.floor(Math.random() * 3); i++) {
                    const leagueKeys = Object.keys(GLOBAL_LEAGUES);
                    const randomLeague = GLOBAL_LEAGUES[leagueKeys[Math.floor(Math.random() * leagueKeys.length)]];
                    const homeTeam = randomLeague.teams[Math.floor(Math.random() * randomLeague.teams.length)];
                    let awayTeam;
                    do {
                        awayTeam = randomLeague.teams[Math.floor(Math.random() * randomLeague.teams.length)];
                    } while (homeTeam === awayTeam);
                    
                    const scores = ['1-0', '2-0', '2-1', '1-1', '0-0', '3-1', '2-2', '3-2'];
                    const randomScore = scores[Math.floor(Math.random() * scores.length)];
                    
                    const predictionElement = document.createElement('div');
                    predictionElement.className = 'prediction-result';
                    predictionElement.innerHTML = `
                        <span>${homeTeam} vs ${awayTeam}</span>
                        <span class="prediction-value">${randomScore}</span>
                    `;
                    
                    f180scoreContainer.appendChild(predictionElement);
                }
            }, 2000);
        }

        // Helper functions
        function getTeamAbbreviation(teamName) {
            return teamName.split(' ').map(word => word[0]).join('').toUpperCase().substring(0, 3);
        }

        function formatMatchTime(dateString) {
            const date = new Date(dateString);
            return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        }

        // Smooth scrolling for navigation links
        document.querySelectorAll('nav a').forEach(anchor => {
            anchor.addEventListener('click', function(e) {
                e.preventDefault();
                
                const targetId = this.getAttribute('href');
                if(targetId !== '#') {
                    const targetElement = document.querySelector(targetId);
                    window.scrollTo({
                        top: targetElement.offsetTop - 80,
                        behavior: 'smooth'
                    });
                }
            });
        });

        // Initialize the page with data
        document.addEventListener('DOMContentLoaded', function() {
            fetchLiveData();
            globalSoccerAI.updateAIStats();
        });
    </script>
</body>
</html>
